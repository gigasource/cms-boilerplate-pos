pipeline {
  agent any

  stages {
    stage('Prepare files and folders') {
      steps {
        withCredentials([string(credentialsId: 'gitbot-access-token', variable: 'GITBOT_ACCESS_TOKEN')]) {
          sh "echo $GITBOT_ACCESS_TOKEN > ./gitbot-access-token"
        }
        sh "cp -r ~/.ssh ./ssh"
        sh "mkdir -p ./config"
        sh "mkdir -p ./plugins"
      }
    }

    stage('Build Docker image') {
      steps {
        script {
          CURRENT_DATETIME = sh (
                  script: "date +%Y-%m-%d_%Hh.%Mm.%Ss",
                  returnStdout: true
          ).trim()
        }

        script {image = docker.build("${env.dockerImageName}:$CURRENT_DATETIME", "-f ./cicd/Dockerfile --no-cache=true --build-arg CONFIG_FILE_NAME=${env.configFileName} .")}
      }
    }

    stage('Push Docker image to registry') {
      steps {
        script {
          docker.withRegistry(env.registryName, env.registryCredentialId) {
            image.push()
          }
        }
      }
    }

    stage('Remove locally built Docker image') {
      steps {
        sh "docker rmi $dockerImageName:$CURRENT_DATETIME"
      }
    }

    stage('Upgrade image version in Rancher') {
      steps {
        withKubeConfig([credentialsId: "${env.kubeCredentialId}"]) {
          sh "kubectl config set-context --current --namespace=${env.kubeNamespace}"
          sh "kubectl set image ${env.rancherWorkloadType}/${env.rancherWorkloadName} ${env.rancherWorkloadName}=${env.dockerImageName}:$CURRENT_DATETIME --record"
        }
      }
    }

    stage('Cleanup workspace') {
      steps {
        sh "rm -rf ./ssh ./gitbot-access-token ./config"
      }
    }
  }
}
